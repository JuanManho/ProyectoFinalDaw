{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JRH\\\\OneDrive\\\\DAW\\\\ProyectoDAW\\\\demeter-delivery\\\\src\\\\pages\\\\OwnerDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport config from '../config';\nimport RestaurantOrdersTable from '../components/RestaurantOrdersTable'; // Importar la tabla reutilizable\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OwnerDashboard = () => {\n  _s();\n  const [orders, setOrders] = useState([]); // Estado para guardar los pedidos\n  const [error, setError] = useState(''); // Estado para manejar errores\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchOrders = async () => {\n      try {\n        const user = JSON.parse(localStorage.getItem('user'));\n        if (!user || user.rol !== 'propietario') {\n          navigate('/login'); // Si no es propietario, redirigir al login\n          return;\n        }\n        const restaurantId = user.restaurantId; // Obtener el ID del restaurante\n        if (!restaurantId) {\n          throw new Error('No se encontr贸 el ID del restaurante en el usuario.');\n        }\n        const response = await fetch(`${config.API_BASE_URL}/orders/restaurant/${restaurantId}`);\n        const data = await response.json();\n        if (!response.ok) {\n          throw new Error(data.error || 'Error desconocido al obtener los pedidos.');\n        }\n        setOrders(data); // Guardar los pedidos en el estado\n      } catch (err) {\n        console.error('Error al obtener los pedidos:', err.message);\n        setError(err.message); // Mostrar el error en la pantalla\n      }\n    };\n    fetchOrders();\n  }, [navigate]);\n  const handleMarkReady = async orderId => {\n    try {\n      const response = await fetch(`${config.API_BASE_URL}/orders/${orderId}/ready`, {\n        method: 'PUT'\n      });\n      if (!response.ok) {\n        throw new Error('Error al marcar el pedido como preparado');\n      }\n\n      // Actualizar el estado local para reflejar el cambio\n      setOrders(prevOrders => prevOrders.map(order => order.id === orderId ? {\n        ...order,\n        estado: 'listo'\n      } : order // Cambiar a 'listo'\n      ));\n    } catch (error) {\n      console.error('Error al marcar el pedido como preparado:', error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pedidos del Restaurante\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) // Mostrar el error si ocurre\n    : orders.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No hay pedidos para mostrar.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(RestaurantOrdersTable, {\n      orders: orders,\n      onMarkReady: handleMarkReady\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) // Pasar la funci贸n como prop\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(OwnerDashboard, \"eRcSspkwD+goDLkp2U2ES2p5F6g=\", false, function () {\n  return [useNavigate];\n});\n_c = OwnerDashboard;\nexport default OwnerDashboard;\nvar _c;\n$RefreshReg$(_c, \"OwnerDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","config","RestaurantOrdersTable","jsxDEV","_jsxDEV","OwnerDashboard","_s","orders","setOrders","error","setError","navigate","fetchOrders","user","JSON","parse","localStorage","getItem","rol","restaurantId","Error","response","fetch","API_BASE_URL","data","json","ok","err","console","message","handleMarkReady","orderId","method","prevOrders","map","order","id","estado","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","onMarkReady","_c","$RefreshReg$"],"sources":["C:/Users/JRH/OneDrive/DAW/ProyectoDAW/demeter-delivery/src/pages/OwnerDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport config from '../config';\r\nimport RestaurantOrdersTable from '../components/RestaurantOrdersTable'; // Importar la tabla reutilizable\r\n\r\nconst OwnerDashboard = () => {\r\n  const [orders, setOrders] = useState([]); // Estado para guardar los pedidos\r\n  const [error, setError] = useState(''); // Estado para manejar errores\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchOrders = async () => {\r\n      try {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n        if (!user || user.rol !== 'propietario') {\r\n          navigate('/login'); // Si no es propietario, redirigir al login\r\n          return;\r\n        }\r\n\r\n        const restaurantId = user.restaurantId; // Obtener el ID del restaurante\r\n        if (!restaurantId) {\r\n          throw new Error('No se encontr贸 el ID del restaurante en el usuario.');\r\n        }\r\n\r\n        const response = await fetch(`${config.API_BASE_URL}/orders/restaurant/${restaurantId}`);\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n          throw new Error(data.error || 'Error desconocido al obtener los pedidos.');\r\n        }\r\n\r\n        setOrders(data); // Guardar los pedidos en el estado\r\n      } catch (err) {\r\n        console.error('Error al obtener los pedidos:', err.message);\r\n        setError(err.message); // Mostrar el error en la pantalla\r\n      }\r\n    };\r\n\r\n    fetchOrders();\r\n  }, [navigate]);\r\n\r\n  const handleMarkReady = async (orderId) => {\r\n    try {\r\n      const response = await fetch(`${config.API_BASE_URL}/orders/${orderId}/ready`, {\r\n        method: 'PUT',\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Error al marcar el pedido como preparado');\r\n      }\r\n  \r\n      // Actualizar el estado local para reflejar el cambio\r\n      setOrders((prevOrders) =>\r\n        prevOrders.map((order) =>\r\n          order.id === orderId ? { ...order, estado: 'listo' } : order // Cambiar a 'listo'\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error('Error al marcar el pedido como preparado:', error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Pedidos del Restaurante</h1>\r\n      {error ? (\r\n        <div className=\"error\">{error}</div> // Mostrar el error si ocurre\r\n      ) : orders.length === 0 ? (\r\n        <p>No hay pedidos para mostrar.</p>\r\n      ) : (\r\n        <RestaurantOrdersTable orders={orders} onMarkReady={handleMarkReady} /> // Pasar la funci贸n como prop\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OwnerDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAOC,qBAAqB,MAAM,qCAAqC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzE,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAMY,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;QAErD,IAAI,CAACJ,IAAI,IAAIA,IAAI,CAACK,GAAG,KAAK,aAAa,EAAE;UACvCP,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;UACpB;QACF;QAEA,MAAMQ,YAAY,GAAGN,IAAI,CAACM,YAAY,CAAC,CAAC;QACxC,IAAI,CAACA,YAAY,EAAE;UACjB,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;QACxE;QAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGrB,MAAM,CAACsB,YAAY,sBAAsBJ,YAAY,EAAE,CAAC;QACxF,MAAMK,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAElC,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;UAChB,MAAM,IAAIN,KAAK,CAACI,IAAI,CAACf,KAAK,IAAI,2CAA2C,CAAC;QAC5E;QAEAD,SAAS,CAACgB,IAAI,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZC,OAAO,CAACnB,KAAK,CAAC,+BAA+B,EAAEkB,GAAG,CAACE,OAAO,CAAC;QAC3DnB,QAAQ,CAACiB,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC;MACzB;IACF,CAAC;IAEDjB,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;EAEd,MAAMmB,eAAe,GAAG,MAAOC,OAAO,IAAK;IACzC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGrB,MAAM,CAACsB,YAAY,WAAWQ,OAAO,QAAQ,EAAE;QAC7EC,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,IAAI,CAACX,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIN,KAAK,CAAC,0CAA0C,CAAC;MAC7D;;MAEA;MACAZ,SAAS,CAAEyB,UAAU,IACnBA,UAAU,CAACC,GAAG,CAAEC,KAAK,IACnBA,KAAK,CAACC,EAAE,KAAKL,OAAO,GAAG;QAAE,GAAGI,KAAK;QAAEE,MAAM,EAAE;MAAQ,CAAC,GAAGF,KAAK,CAAC;MAC/D,CACF,CAAC;IACH,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdmB,OAAO,CAACnB,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAACoB,OAAO,CAAC;IAC3E;EACF,CAAC;EAED,oBACEzB,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC/BjC,KAAK,gBACJL,OAAA;MAAKuC,SAAS,EAAC,OAAO;MAAAL,QAAA,EAAE7B;IAAK;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,CAAC;IAAA,EACnCnC,MAAM,CAACqC,MAAM,KAAK,CAAC,gBACrBxC,OAAA;MAAAkC,QAAA,EAAG;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEnCtC,OAAA,CAACF,qBAAqB;MAACK,MAAM,EAAEA,MAAO;MAACsC,WAAW,EAAEf;IAAgB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;IACzE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpC,EAAA,CAtEID,cAAc;EAAA,QAGDL,WAAW;AAAA;AAAA8C,EAAA,GAHxBzC,cAAc;AAwEpB,eAAeA,cAAc;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}