{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JRH\\\\OneDrive\\\\DAW\\\\ProyectoDAW\\\\demeter-delivery\\\\src\\\\pages\\\\DeliveryDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ReadyOrdersTable from '../components/ReadyOrdersTable';\nimport AssignedOrdersTable from '../components/AssignedOrdersTable';\nimport config from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeliveryDashboard = () => {\n  _s();\n  const [readyOrders, setReadyOrders] = useState([]);\n  const [assignedOrders, setAssignedOrders] = useState([]);\n  const [error, setError] = useState('');\n\n  // Obtener pedidos en estado \"listo\"\n  const fetchReadyOrders = async () => {\n    try {\n      const response = await fetch(`${config.API_BASE_URL}/orders/ready`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Error al obtener pedidos listos.');\n      }\n      console.log('Pedidos listos en el cliente:', data); // LOG PARA DEPURACIÓN\n      setReadyOrders(data);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Obtener pedidos asignados al repartidor\n  const fetchAssignedOrders = async () => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    try {\n      const response = await fetch(`${config.API_BASE_URL}/orders/user/${user.id}`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Error al obtener pedidos asignados.');\n      }\n      setAssignedOrders(data.filter(order => order.estado !== 'entregado'));\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Asignar un pedido al repartidor\n  const handleAssignOrder = async orderId => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    try {\n      const response = await fetch(`${config.API_BASE_URL}/orders/assign`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          orderId,\n          repartidorId: user.id\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error al asignar el pedido.');\n      }\n\n      // Refrescar las tablas\n      fetchReadyOrders();\n      fetchAssignedOrders();\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Marcar un pedido como \"en camino\"\n  const handleMarkInTransit = async orderId => {\n    try {\n      const response = await fetch(`${config.API_BASE_URL}/orders/in-transit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          orderId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error al marcar el pedido como en camino.');\n      }\n\n      // Refrescar las tablas\n      fetchAssignedOrders();\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  // Completar un pedido\n  const handleCompleteOrder = async orderId => {\n    try {\n      const response = await fetch(`${config.API_BASE_URL}/orders/complete`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          orderId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error al completar el pedido.');\n      }\n\n      // Refrescar las tablas\n      fetchAssignedOrders();\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  useEffect(() => {\n    fetchReadyOrders();\n    fetchAssignedOrders();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Panel de Repartidor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Pedidos Listos para Recoger\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReadyOrdersTable, {\n      orders: readyOrders,\n      onAssign: handleAssignOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mis Pedidos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AssignedOrdersTable, {\n      orders: assignedOrders,\n      onMarkInTransit: handleMarkInTransit,\n      onComplete: handleCompleteOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(DeliveryDashboard, \"5gzP4B2ULeEkJkNjORLrQNRNEgQ=\");\n_c = DeliveryDashboard;\nexport default DeliveryDashboard;\nvar _c;\n$RefreshReg$(_c, \"DeliveryDashboard\");","map":{"version":3,"names":["React","useState","useEffect","ReadyOrdersTable","AssignedOrdersTable","config","jsxDEV","_jsxDEV","DeliveryDashboard","_s","readyOrders","setReadyOrders","assignedOrders","setAssignedOrders","error","setError","fetchReadyOrders","response","fetch","API_BASE_URL","data","json","ok","Error","console","log","err","message","fetchAssignedOrders","user","JSON","parse","localStorage","getItem","id","filter","order","estado","handleAssignOrder","orderId","method","headers","body","stringify","repartidorId","handleMarkInTransit","handleCompleteOrder","children","fileName","_jsxFileName","lineNumber","columnNumber","className","orders","onAssign","onMarkInTransit","onComplete","_c","$RefreshReg$"],"sources":["C:/Users/JRH/OneDrive/DAW/ProyectoDAW/demeter-delivery/src/pages/DeliveryDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReadyOrdersTable from '../components/ReadyOrdersTable';\r\nimport AssignedOrdersTable from '../components/AssignedOrdersTable';\r\nimport config from '../config';\r\n\r\nconst DeliveryDashboard = () => {\r\n  const [readyOrders, setReadyOrders] = useState([]);\r\n  const [assignedOrders, setAssignedOrders] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  // Obtener pedidos en estado \"listo\"\r\n  const fetchReadyOrders = async () => {\r\n    try {\r\n      const response = await fetch(`${config.API_BASE_URL}/orders/ready`);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Error al obtener pedidos listos.');\r\n      }\r\n      console.log('Pedidos listos en el cliente:', data); // LOG PARA DEPURACIÓN\r\n      setReadyOrders(data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Obtener pedidos asignados al repartidor\r\n  const fetchAssignedOrders = async () => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    try {\r\n      const response = await fetch(`${config.API_BASE_URL}/orders/user/${user.id}`);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error || 'Error al obtener pedidos asignados.');\r\n      }\r\n\r\n      setAssignedOrders(data.filter((order) => order.estado !== 'entregado'));\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Asignar un pedido al repartidor\r\n  const handleAssignOrder = async (orderId) => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    try {\r\n      const response = await fetch(`${config.API_BASE_URL}/orders/assign`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ orderId, repartidorId: user.id }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al asignar el pedido.');\r\n      }\r\n\r\n      // Refrescar las tablas\r\n      fetchReadyOrders();\r\n      fetchAssignedOrders();\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Marcar un pedido como \"en camino\"\r\n  const handleMarkInTransit = async (orderId) => {\r\n    try {\r\n      const response = await fetch(`${config.API_BASE_URL}/orders/in-transit`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ orderId }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al marcar el pedido como en camino.');\r\n      }\r\n\r\n      // Refrescar las tablas\r\n      fetchAssignedOrders();\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  // Completar un pedido\r\n  const handleCompleteOrder = async (orderId) => {\r\n    try {\r\n      const response = await fetch(`${config.API_BASE_URL}/orders/complete`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ orderId }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error al completar el pedido.');\r\n      }\r\n\r\n      // Refrescar las tablas\r\n      fetchAssignedOrders();\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchReadyOrders();\r\n    fetchAssignedOrders();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Panel de Repartidor</h1>\r\n      {error && <p className=\"error\">{error}</p>}\r\n      <h2>Pedidos Listos para Recoger</h2>\r\n      <ReadyOrdersTable orders={readyOrders} onAssign={handleAssignOrder} />\r\n      <h2>Mis Pedidos</h2>\r\n      <AssignedOrdersTable \r\n        orders={assignedOrders} \r\n        onMarkInTransit={handleMarkInTransit} \r\n        onComplete={handleCompleteOrder} \r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeliveryDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}